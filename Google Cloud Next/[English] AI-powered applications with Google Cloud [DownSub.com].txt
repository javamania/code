

ANU SRIVASTAVA: Hi, everyone.

Welcome to Cloud Next 2021.

We're so excited you're here
with us on developer day.

So we're going to be showing
you how you can incorporate

Google Cloud's AI and ML
offerings into your app

or service.

With our APIs, it doesn't
matter what platform

or stack you're using,
we've got you covered.

Today specifically we'll be
talking about Google Cloud

Document AI and how to
use it with our serverless

offerings such as Cloud
Functions for business

logic and workflows for
orchestrating your services.



But before we get
started, who are we?

My name is Anu Srivastava,
and I'm a developer advocate

in New York focusing
on AI and ML,

bringing these services to
developers around the world.

GUILLAUME LAFORGE:
Hello, everyone.

I'm Guillaume.

I am also a developer
advocate at Google,

but I'm based in
the Paris office.

And I'm focusing mainly on
our serverless technologies,

like Cloud Functions, Cloud
Run, App Engine and also

our orchestration
solutions like workflows.

ANU SRIVASTAVA: Awesome.

So let's start with
why we're here.

It's Google Cloud's mission
to help you innovate faster

towards your business
goals, and there

are several different
ways that we

can help you do
this, whether it's

through storage
solutions, infrastructure,

AI services, scalable
computing, data analytics and so

much more.

Enterprise are after smart
easy and scalable business

solutions.

A lot of these tools
on GCP are there

so you can focus on your
core business mission,

not all these
auxiliary functions.

So for example, if you have
complex business tasks,

the cloud helps you
deploy, develop and scale.

You don't have to worry about
infrastructure management,

system updates, all
of those things.

Maybe you have data in
several different sources

that you need to use in
a streamlined fashion.

And then, last but not
least, machine learning.

By leveraging our AI platform,
or our pre-trained models,

you can incorporate machine
learning into your application

without having to get
a PhD in this field.

We just want you to
focus on the problem

that you're actually trying
to solve and nothing else.

So these are the four
trends that we're actually

seeing in this space.

We're going to demo
an expense report

application backed by
machine learning and running

on Google Cloud.

So now let's actually dive
into the specific products

that we'll be working with.

So let's start with documents.

So some of the most
important data in companies

isn't actually living
in databases but rather

in documents.

So think about every
time that you've

had to file an expense report.

Nearly all business processes
either began, include,

or end with a document.

So this is where
Document AI comes in.

This is a platform that
we launched at GA earlier

this year in April,
and it helps you

turn your unstructured
content into structured data.

There's a lot of important
business information in PDFs

and images, and these
formats aren't actually

easily consumable to extract
data by a computer as it is.

So this is what we
actually call dark data.

So data that
companies have stored

for either compliance
reasons or something else,

but you aren't
actually harnessing yet

to help decision making,
help customers or make

better business decisions.

And this is what Document AI
is there to help you with.

So there are lots
of different ways

that you can use Document AI.

First we have
generic Document AI.

So we actually have
a toolkit of OCR.

We have OCR training
for type forms

as well as handwritten forms.

This OCR is powerful.

And then we even have something
called the form parser, which

will understand any form that
you feed it, it will understand

the question and answer
nature of that form

and feed it back to you, key
value pairs in a JSON format

that are much more
easy to use than doing

that parsing yourself from OCR.

Then, in the middle, we have
specialized Document AI.

So we have trained
several models

on the world's most common
business form types you

can leverage into your system.

This is going to be the
focus of our talk today,

but let me also talk about
custom document processing.

So we also have
tools in our toolkit

that you could train a model on
your proprietary business form

type so you can ensure accuracy.

So specialized Document AI.

We have different
solutions optimized

for different
industry use cases.

Let me talk about that.

First, we have
lending Document AI.

So this is a set of specialized
models for forms such as W-2s,

W-9s, bank statements.

All of these are
different pieces

that you'd have in a
typical mortgage packet.

So using this solution, you can
streamline data capture and all

of the different steps that need
to happen in a mortgage process

to make it faster.

Then, in the middle, we have
procurement Document AI.

So this covers invoices,
receipts, utility statements

and more.

And this is what we'll
be demoing today.

But before we get
there, let me talk

about what we just
launched at Next this year,

contracts Document AI.

It's been said
that contracts can

be some of the most
important business documents

that you have.

So we've trained
models to extract

key pieces of information
that you can then

use to make important
decisions, like

programmatically understanding
how long the contract is valid,

things like that.

So what's the magic in Doc AI?

It's not just OCR.

It's a whole pipeline
leveraging the technology

that we've been building
at Google for decades.

So first we have Doc Prep.

So let's say you upload
an image of a wrinkled

or a coffee-stained document.

We'll use image tools
to fix SKU, better

enhance the text so data can
be more easily extracted.

Then we get to
split and classify.

We want you to be
able to leverage

your data and the raw
form that it comes in.

So think about a
large PDF packet

with several different
form types in it.

Well, by using our splitting
and classifying tools,

you can actually identify
where these sub documents start

and end and what documents
are there so then

you can take those specific
pieces of your packet

and then feed them through
the correct processor.

Then we have entity extraction.

So this is where we extract
those key pieces of information

that you need per doc type.

So even though you might
have high variance doc types,

every receipt and invoice
might look different.

We know that there are pieces of
information that are universal

to these document types.

So for procurement,
every invoice

is going to have an
invoice ID, every receipt

will have several line items.

They'll have currency.

They'll have total amounts.

They'll have tax values.

So we've designed a
schema per form type

that you can guarantee
your data will

be merged into and returned
to you in your JSON response.

So this makes it
much easier when

it's schematized to then
either feed into a database

or give the pieces
of information

that you need to a
downstream service.

Now, let's talk about
some more magic pieces.

Now we have
normalize and enrich.

Have you ever been coding
with dates and times

and have a formatting mismatch?

I'm in America and
Guillaume's in France,

and we use different
date-time formats.

Well, Document AI
will do normalization

on monetary, dates,
and addresses

so it's more easy to
work with whatever style

your system is in.

Here, we also use for enrichment
the Google knowledge graph.

So the Google knowledge graph
is a service that powers search

as well as several
other applications

that lets you know contextual
relevant information.

So let's say on your document
you have an incomplete business

name or maybe an address
that isn't full or correct.

The Google knowledge graph will
supplement this information

with the key pieces
of information

that you could then
find in a search query.

Then, last but
not least, we know

with these critical
business processes,

you have no room for error.

So with the
human-in-the-loop platform,

you can select a confidence
threshold where you can have

a document reviewed if certain
keys don't meet a certain

value, say 95%, 98% confidence,
or if the whole document

doesn't meet that
confidence threshold.



So I know we went through that
really fast, but now let's

work on taking this
API and turning it

into a full fledged application.

So I'm going to hand
it over to Guillaume

to tell us how we're
going to do that.

GUILLAUME LAFORGE:
Thank you, Anu.

Anu described the big
piece of the puzzle, which

is where most of the smarts are,
but we'll need some business

logic, some business processes
to integrate everything

together, to create a full blown
useful application for our end

users.

In a short moment
I'll show you how

we use Document AI, Cloud
Functions, and workflows

to craft a small
expense report solution.

But how are we going to do it?

Well, we are going to use Google
Cloud's serverless solutions

for business logic thanks
to Cloud Functions.

What is serverless,
and why should we

use that instead
of your homegrown

servers or virtual machines?

Serverless solutions allow you
to focus on your application

and not on infrastructure
management or provisioning.

Serverless products
like Cloud Functions

fully manage the environments.

Developers can use to
easily deploy and scale

their logic without hassle.

So from a programming
model perspective,

we usually create
stateless services

based architectures,
which scale more simply.

And last but not least,
since the scaling

is handled by the
platform for you,

we also apply only for
usage pricing model,

where you pay,
really, proportional

to the actual usage
of your application.

Cloud Functions is a
bit like some cloud glue

for a more programmable cloud.

Tying various useful
services together,

reacting through events
flying through your system.

There are [INAUDIBLE] available
for all major programming

languages, whether it's
Node.js, Python, Java and more.

Cloud Functions react to events,
like incoming HTTP request,

background events
from the cloud,

like a new file stored on
Cloud Storage or a new document

in Cloud Firestore,
our NoSQL database.

And you can easily deploy
small units of business logic

on the platform from the
console, the Google Cloud

Console, or from the
command line as well.



Applications are often composed
of several services or APIs

that you can call in turn to
create the overall business

process, like invoking
the Document AI API

or calling Firestore to store
some structured data as well

as some Cloud Functions
to implement some logic,

like finding the right
information from the Document

AI's output.

For orchestrating those
APIs and services,

we can take advantage of
Google Cloud Workflows.

Workflows is a
solution to orchestrate

Google Cloud and
HTTP-based API services,

including third party.

It doesn't have to be something
solely hosted on Google Cloud,

and to tie them into
serverless workflows.

It's about automating
complex processes.

Workflow is a fully
managed service

requiring no infrastructure
or capacity planning.

It offers fast
scalability support,

scaling down to
zero when not used

and a pay-per-use
pricing model per step

in the Workflow--
per step model.

And last but not least, for
the developer experience,

it deploys instantaneously.



You have a YAML-based
declarative language.

You can also use JSON,
actually, with variables,

with expressions and formulas.

You can apply some conditional
logic for conditional step

execution and branching
into your workflow steps

with, what else?

Built-in JSON parsing.

When you need to parse the
API output from the API

that you call with
error and retry

logic when an API fails and
you need to retry and call it

again, and various other
useful built-in functions.

There's also built in
authentication for Google Cloud

APIs and services.

So for example,
services that would

be hosted on Cloud Run
or Cloud Functions,

are pretty much
transparently authenticated

when called from the
workflow definition.

It executes workflows
with the reliability

required for enterprise and
line of business applications.

Workflows offers fast scheduling
of workflow executions

and transition between the
various tasks and steps.

And also, predictable
performance with no cold

start at all.

In terms of pricing,
as I said, it's

a per step execution
pricing approach.



So let's have a look
at the demonstration.

It's an expense
report application.

We'll use Document AI for the
smart parsing of the receipts,

Cloud Functions for some logic,
for invoking the workflow,

calling callback endpoints
for the manager approval

or also transforming some
light ETL for transforming

some complex data into
simpler data structure that

will store in Cloud
Firestore as structured data.

And, of course, Workflows to
orchestrate the whole process.

So let's have a look
at the demonstration.

Here is our expense
report application.

As an employee, I have
access to this page where

I can select and upload some
receipts to create my expense

report.

So let's click on
the Select button.

I'm going to pick
a couple receipts.

Then I'm going to click
the Submit Report button.

So the receipts
are being uploaded,

and the report is submitted.

And now it's already in
the processing queue.

It's going to be handled
by Document AI who's

going to look at the items, the
line items, the supplier, et

cetera, that are recognized
in those receipts.

Now, let's have a look at the
administration page, which

is the page that
managers will be

able to look at to
accept, reject, approve

expense reports.

So here we already have one
report waiting in the queue.

So the previous report
that was submitted

contained two receipts.

I can click to see the details.

So there's the Raintree
Restaurant and the Raphael

Restaurant, and I can see some
details of what was ordered,

the price, the total
amount, the currency.

And Document AI is able
to do some data enrichment

so I could potentially
see the knowledge graph

information, for
example, with the details

about the address
of the restaurant.

Then, if I'm happy with
this expense report,

I can just click on
Approve or, if I'm unhappy,

I can click on Reject.

And all those
actions are actually

going through the Workflow,
the Workflow definition.

And for example, now I
can see that my report

came into the approved section.

That's the one that
I just approved.

And, yeah.

The one I had submitted just
a few seconds ago arrived.

This time, the vendor wasn't
recognized, but at least

the amount, the currency and
the details were handled nicely.

So let's have a look at how
it's done under the hood.

So first of all,
I'm going to show

you the Workflow definition.

So as I said, everything
is going to the Workflow,

or through the Workflow.

So whenever there's
an action in the UI,

it's going through some Cloud
Function invoking the Workflow.

So, for example, here,
I'm preparing my workflow

definition with some
variables, but let's have

a look at this one.

With Workflow you can
call REST APIs, any API,

whether it's from
Google, your own APIs,

or it could be third
party external APIs.

But here, I'm not calling
Document AI directly,

I'm actually
calling a connector,

which is a dedicated
wrapper, run

the REST API for Document AI.

And what's great with that
is that, although invoking

the batch process of going
through all the receipts,

I don't have to handle
the waiting, logic,

queuing, et cetera.

I just need to say, OK, I'm
submitting all those receipts.

They are here.

You'll find everything
there, and I'm

interested in the results.

Please put the results of
the processed annotations

in Cloud Storage.

So in a few lines, we're
able to call Document AI.

And then, so either it's
working or whether there's

an error potentially.

So we might branch in different
places of our workflow.

And by the way, you can see the
visualization of your workflow

on the right side here.

I'm updating Firestore to
explain what the status is.

But here, if the
parsing succeeded,

we can have a look at the
annotations, the results

returned by Document AI.

And we have a little
Cloud Function here

that's going to parse the JSON
file generated by Document AI

to find the relevant
details I'm interested in.

So this function,
process annotations,

and what it's doing
here is that I'm

going to tell this Cloud
Function, OK, let's

have a look at the files
in this storage bucket

where the JSON generated
by Document AI is located.

Then I'm going to go
through all the files.

Each receipt has a file
associated with it.

So I'm downloading
the file locally,

and I'm passing it with JSON.

And then I'm going to hand
for interesting fields.

For example, I'm curious
about the supplier name.

I want to learn about all the
line items that are available,

each line.

I ordered a pizza,
I order some drink.

I'm also interested in
the total amount of money,

but also the
currency, because it's

important to know which
currency was used.

And then I'm
creating this summary

and then I'm storing
that in Firestore.

All the metadata, I'm
storing that in Firestore.

And let's go to Firestore where
I can see the results here.

So what's stored in Firestore,
that's things like the status,

whether here it's
awaiting validation,

but here I see the line
items for this first receipt,

the line items for
the older receipts.

But if you come
back here, you'll

notice that the report
is awaiting validation

because we want the manager to
approve or reject this report.

So that's why we have the
Approve and Reject button.

But what's happening here?

We've got the workflow
that is running,

but there's a very useful
feature in Workflow

that's called callbacks.

A callback is a way to wait
for some external input,

whether it's a human input.

Here, it's the manager that's
going to approve this report.

But it could be
some external system

that is going to call
back the workflow

to continue its execution.

And let me show you this
part of the workflow.

I'm creating a callback here.

So I'm saying, I'm ready to
receive an HTTP post on the URL

that workflow is going
to generate for me.

And then I'm also going to
wait for the workflow to be--

the callback to be called.

So this is here, await_callback.

And I'm waiting just an
hour, but I could wait longer

potentially, up to one year.

And then either it works
or not, it's rejected,

or perhaps there's an error
and I update Firestore

with this information.

And that's where here, again,
I interact with Firestore

to store the approval
or rejection.

So that's about it for the demo.

So to recap what you
saw in this demo, here's

an architecture diagram
that sums it up.

So we have the two web pages
for the employee submitting

the expense report and for the
manager approving the report.

So the first step is to upload
the receipts into Cloud Storage

buckets.

We'll do that thanks
to Firebase Storage,

which uploads the document
into Cloud Storage buckets.

Then, again, from the UI
from the employee view,

we'll go through a
Cloud Function that

is going to invoke workflows
to create an execution

and stop the execution
of our workflow.

What Workflow is going to do--

well, it's going to store
some data about the expense

report that's been
submitted, but then it's

going to invoke Document AI
and let Document AI fetch

the receipts from Cloud
Storage, analyze the receipts

and then store the
result into a JSON file

in another bucket, a
Cloud Storage bucket.

Then, the workflow is going
to call another function whose

job is going to actually
go through the JSON data

and pick up just the
right information we're

interested in.

Line items, supplier name,
amount, total amounts,

currency, et cetera.

So we've got the data.

In the manager view,
the manager will

be able to click on either
buttons, the one approving

the expense report or the one
rejecting the expense report.

And we'll go through the
callback, the callback URL.

From this web page, we'll
call back into the workflow

through a Cloud
Function to continue

the execution of the
workflow and store

the result, approved or
rejected, in our Cloud

Firestore database.

And that's about it for
this architecture diagram

of our expense
report application.



So thanks a lot
for your attention.

We'd like to encourage you to
have a look at those few links

here to get started on Document
AI, Workflows and Cloud

Functions.

We are really looking
forward to hearing from you

about what you're going to build
next with those technologies.

ANU SRIVASTAVA: Yeah.

So you can take a
look at the source

code of what we showed today.

Guillaume and I had a
lot of fun building this.

We used Node.js with
all of these services.

We've published
the code to GitHub.

Let us know what you think.

Tweet us what you're
going to build

or what you're excited for.

And let us know how we can help.



