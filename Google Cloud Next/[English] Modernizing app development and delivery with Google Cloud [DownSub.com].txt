

VICTOR SZALVAY:
Hello, and welcome

to our talk on
Google Cloud Golden

Path to Application Delivery.

My name is Victor Szalvay.

I'm a product manager, and
I work in the DevOps space

at Google Cloud.

I'm joined by my
colleague, Chris Willis.

CHRIS WILLIS: Hi, my
name is Chris Willis,

and I'm a customer
engineer at Google Cloud.

I'm really focused on
helping our customers succeed

with Kubernetes, and helping
people build and run cloud

native applications at scale.



VICTOR SZALVAY:
So Chris and I are

going to talk to you all
today about application

development with the
specific focus on Kubernetes.

So we're going to look at
developer tools and CI/CD,

which are often a pain
point for organizations,

but really are also an
essential part of the journey.

I think many of you know
the benefits of CI/CD.

But just to kind of
recap quickly, it

increases developer
productivity.

And that's directly linked
to customer value generation.

And getting that
value out to customers

faster means you're
more competitive.

You're scoring higher
customer satisfaction

with your customers.

And with better
automation and pipeline

parity comes higher
quality and security.

But we understand that you
are where you are, right?

And CI/CD and
DevOps improvements

need to happen incrementally
and with your existing tools

and processes.

So they say that proof
is in the pudding, right?

And our research highlights that
elite performers, the ones who

ship code multiple
times per day,

are 1.8 times more likely
to achieve or exceed

their commercial
goals, including

things like profitability,
productivity, and customer

satisfaction.

But our research also shows that
organizations are increasingly

successful at adopting CI/CD.

So more and more of
you out there are

going the path of CI/CD, and are
seeing those improved business

outcomes as a result.

You may be here on your
CI/CD journey, right?

Developers are
iterating and committing

code, which then feeds
into a CI/CD pipeline.

And ultimately, end
products are delivered out

to your customers.

But you're also faced
with some challenges.

And for some of you, that
includes self-managing

your CI/CD infrastructure.

Also bespoke and complicated
configuration pipelines.

There's often weak separation
of duties and concerns

when it comes to CI/CD systems.

And often those CI/CD
systems are overused.

They're doing build and
test, but they're also

doing the kitchen sink.

And lastly, there are
variances between developer

and deployment
environments, which

surfaces unwelcome
surprises in production.

So this ultimately
leads to FUD, right?

And from the operations
side of the house,

we're talking about
fear of deployment.

Are developers really
iterating in production

like Kubernetes environments?

Are they even
adopting Kubernetes?

And when they are,
is the innovation

they're doing around rendering
tools affecting things

like pipeline reliability?

Chris?

CHRIS WILLIS: Yeah,
this is really

why I jumped at the
opportunity to get

involved with the golden path.

So some of the customers
I've worked with struggle

to get their developers to work
directly with Kubernetes, just

because they have their
development workflow.

They have their local Docker
container deployments.

And they're used to testing
against that, and just kind

of working like that.

And it's really something
that they're not

interested in changing.

And it makes sense, because
operators were really

sold on Kubernetes when
it exploded in popularity.

But in some cases, developers
haven't really followed suit.

They really weren't in the room
when that jump to Kubernetes

was made.

And they're kind
of now just being

told to deal with
it, essentially.

VICTOR SZALVAY:
Yeah, and I think

there's also impact for the
security side of the house,

right?

A lot of uncertainty there.

Is there enough
automation to go around

for things like security
analysis and vetting

before things go out the door?

Or are we relying on manual
processes for that vetting?

And also, are we finding
these security issues too late

in the development cycle,
causing a lot of churn?

So there's a lot of FUD.

And what we wanted to
do here was present

a pathway that's been
built out and derived

from a lot of the learnings
that we've taken at Google

internally.

So we identified the
following three concepts.

And as I mentioned, these
have helped our developers

stay productive internally while
enabling automation at scale.

So the first one is to
decouple and insulate

from configuration change.

So Kubernetes
manifest rendering,

it's often tightly coupled
with CI/CD pipelines.

And that really creates sort
of almost like a gridlock

situation, where both
sides, developers working

in their rendering
workflows and operations

with their CI/CD pipelines,
they're hesitant to make moves.

They don't want to break
each other, so to speak.

And so instead, we want to
separate out configuration.

And we want to separate out
the responsibility model.

Next is unification
of the dev experience.

And what I mean here is across
the developer inner loop,

the CI/CD loop, but
also all the way

out to production
Kubernetes clusters.

The biggest pain developers
face in Kubernetes development

is knowing the
quirks and variances

across the various loops.

So in the inner loop you
might be using something

like minikube.

In CI/CD there may be some
slightly different environment.

And ultimately, your production,
enterprise Kubernetes

environments, those might
be different altogether.

And I'm talking about
things like the use

of different
environmental variables,

perhaps different secrets,
replicas, and so on.

So what I really want is a
way to bridge these variances

and provide a more
seamless experience

to all my developers.

And the last point
here is shifting left.

It wastes a lot of developer
energy and nerves, frankly,

when policy or
security constraints

are discovered downstream.

So what we want to do is
actually inject those policy

checks right into the IDE to
catch those issues before devs

spend too much time
down a certain pathway.

So we're excited to
share with you today

the notion of the golden
path for application

delivery on Google Cloud.

Now the key to the golden path
is a product called Scaffold.

Scaffold is an open source
command line utility

that unifies the
developer experience

with build, deploy,
test, security,

and provides a uniform
experience across all

of those loops.

You can use Scaffold
with your existing tools.

But it's also, of course,
bundled with the Google Cloud

tools you see here.

And while you may be familiar
with Cloud Code and Cloud

Build, we're really
excited to introduce

Cloud Deploy, our fully
managed, opinionated, continuous

delivery service purpose
built with Google Kubernetes

Engine in mind.

Chris, you have any
thoughts to add on this?

CHRIS WILLIS:
Yeah, just I wanted

to highlight a few things here.

So for those of you that are
not familiar with Cloud Code,

it's an extension of VS
Code in [? Inteligase, ?]

or it is an extension that
is produced for these IDEs.

So there's no real
switching between IDEs.

You don't have to change
your IDE just because you're

using Cloud Code.

It's baked right into your IDE.

The Cloud Code run
on Kubernetes feature

really clearly delineates where
the developer's responsibility

ends and ops begins.

This means developers can really
focus on writing code, and not

trading YAML files, and
troubleshooting surprises

when deploying to staging.

So this is really that
shift left mentality

that Victor was talking about.

And then integration
with Scaffold,

it being an open
source project means

ops can really start developing
an opinionated approach

to CI/CD.

I know with the
introduction of Kubernetes,

which is really a platform
to build platforms--

it's not a platform itself--

there's a lack of opinion
on Build and Deploy.

So Scaffold can really help
you build those opinions,

and carry them to
other cloud vendors.

So you're not locked
into Google Cloud.

I mean, obviously Google
Cloud integrates heavily

with Scaffold.

And we're going to make that
a first class experience.

But you can take the
Scaffold container image

and run that same Scaffold
configuration elsewhere.

So you're not really
locked into our services.

VICTOR SZALVAY: Yeah, and
Chris, at the beginning

we talked a lot about
incremental adoption and sort

of the reality of making
changes to your CI/CD pipelines.

We want to encourage all
of you to really start

with your most urgent need.

And for many of our
customers, they've

got a development loop going.

They've got CI going.

But CD is the next frontier.

And so perhaps you
can get the benefits

of Scaffold and the golden
path by adopting something

like Cloud Deploy as a
fantastic starting point.

Or perhaps you can
start with Cloud Code.

As Chris mentioned,
this is an IDE plug-in

which bundles Scaffold.

And it provides a
graphical user experience

on top of the Scaffold CLI.

Chris, anything else you
want to add about Cloud Code?

CHRIS WILLIS: Yes, I mean, the
coolest thing about this one

is that it's free.

So developers and operators
can, right after this session,

go grab Cloud Code.

And there's no dependency
on Google Cloud.

We have sample apps that'll
just work out of the box.

You'll click the Run
on Kubernetes feature,

and bam, it's
deployed to minikube.

So it's a really cool, powerful
tool that hopefully y'all will

check out after this.

VICTOR SZALVAY: Yeah,
and the last one,

here is perhaps Cloud Build.

If you're looking
for a fully managed

build and continuous
integration platform,

Cloud Build offers
a Scaffold builder,

which easily integrates
Scaffold into your continuous

integration workflow.

So Chris, I think the best way
to experience the golden path

is to see it in action.

And what do you think?

Should we get into the demo?

CHRIS WILLIS: Yeah, let's do it.

VICTOR SZALVAY: All
right, here we go.

All right, so I just have a
basic Go application here.

And we're going to
use Scaffold in it

to generate our deployment
manifests, our Kubernetes

deployment manifests,
and our Scaffold YAML.

And these are both going to
be applied against minikube.

We'll add a test
here real quick.

But I want to break
down this Scaffold YAML.

So we have a build
step which is actually

going to build our image.

And we're using
Buildpacks because we're

going from source.

You'll notice there's
no Docker file here.

And a test step,
which is just going

to run a simple Go test
inside the container image.

And a deployment manifest,
where our Kubernetes deployment

is defined.

And this is all on minikube.

So it's just going to pull
whatever Docker image resolves

there for Go mod image.



All right, so now
we're going to use

that Run on Kubernetes
button that we

had talked about previously.

And this is going to execute
the Scaffold YAML steps,

and use the deployment
manifest that we generated

to deploy to minikube.

And we'll go and check
out our application.

Just a very simple
Go application.

Refresh it in the
counter increments.

So now we want to make a
change to our application

to have that quick
feedback as a developer.

So we want to make a local
change and see if it works.

So we're just going to change
this color from blue to red.

I know, nothing huge.



And we see file synced
as soon as we saved it.

Scaffold picks up on
that change locally.

And here we go.

We have a red instead
of a blue application.

Very important.

All right, let's stop it here.

And obviously,
debugging is important.

So this is my favorite feature.

So let's go down and
insert a breakpoint.

Looks like we had one left over.

But insert a
breakpoint at line 81,

right where the
counter increments.

And click Debug on Kubernetes
this time instead of Run

on Kubernetes.

So this will actually
inject a debugger

into the container and
forward those events.

This is all part of Scaffold.

Forward those events to the IDE.

And so when we
refresh this page,

it's going to drop us right
into the debug output.

And we can search through
local variables here.

And we can go into the
call stack and look

at all sorts of things,
troubleshoot certain things

about our application that
might have gone wrong.

We can resume.

We can step over, all
the normal debug stuff.

So very important
for developers to be

able to debug
their applications.

So right now we have
this dev inner loop.

The dev is working
through Cloud Code,

deploying locally
using minikube.

They have their
application deployed,

and they're working away at it.

So now the ops folks are
going to go and create

a Cloud Build trigger.

Which any time there is
a PR pulled into master,

or some change to
master, this is

going to fire off and
execute those scaffold steps

that we specified.

And so now we have any time
the developer pushes to get

or PR is approved, Cloud
Build will trigger.



All right, so you'll see
we've added some things

to our Scaffold manifest.

We have a profile
named staging, which

will deploy the deployment
staging manifest,

which is we just copied
the deployment manifest

that we generated earlier
with Scaffold in it, and added

whatever is specific to staging.

And we did the exact
same for Canary and Prod.

And this is very
important, because these

are going to stretch across
into what Cloud Deploy is later

going to use to deploy to the
various staging Canary and Prod

environments.

They're kind of
like scopes, right?

You're trying to get across
how this tool should behave.

Or how this deployment
should behave

in a different
environment, which

is where we talked about kind
of the applying of opinions,

and making an opinionated
CI/CD process that

sticks with Scaffold and not
the Cloud providers' specific

tools.



We have our pipeline YAML, where
we're specifically saying what

the stages of the pipeline are.

So we have staging
Canary and Prod.

And for those stages in
the pipeline-- so each one

in the Cloud Deploy
interface, you'll

see it'll create kind of a box
as it visualizes the pipeline.

For each one you're
saying, I want

you to use this Scaffold
profile called staging.

So this is where
Scaffold and Cloud Deploy

meet is that you're specifying
a specific step in the pipeline

and what Scaffold
profile should run.



Then we have the actual
configuration for the staging

step in the pipeline.

So remember, in the
last file we specified

that there was a step in
the pipeline called staging.

This is where we're going
to say, OK, staging.

You're going to use this Google
Cloud project, this cluster

name, called staging,
and then obviously

the region that it's in.



Now we're going to create
the pipeline in Cloud Deploy.

We are going to
configure the staging

step in Cloud Deploy using
those files we just discussed.



And then we're going to
trigger the pipeline.



All right, so we go to
the Cloud Build interface,

and we will check the
build triggering here.



Going to go and do
all of those Scaffold

steps that we've defined.



And we'll go into Cloud Deploy.

Check out the pipeline.

This will trigger and
do the actual deploy,

as we've specified.

And we'll go and check
on our application.

And here it is, running.

So the developer is now
working in their inner loop.

They submit a PR.

An operator approves it.

Cloud Build triggers
because master was changed.

The artifact is built and
stored in artifact registry.

And then the associated staging
process in the Cloud Deploy

pipeline is triggered.

And a deployment to
staging is initiated.

And we're going to promote that
staging release we deployed.

We're going to promote
it to a Canary deploy.



And that will deploy
to Prod, right?

So normal Canary deployment,
it'll deploy to Prod.

And then if there's anything
wrong, you just roll it back.

And hopefully
nothing bad happened.



So let's make sure that that
is deployed to the Canary,

or the Canary is
deployed correctly.



And let's check on
the application.

Looks good.

We got our little
chickadee there

to signify that it
is Canary deployment.



And now we will promote the
release from a Canary deploy

to Prod.

And there's going to
be an extra step here.

So see that it's pending.

So we know that we need
an approval, someone

with the authority to approve
this release to production.

Not just anyone can push
to production, hopefully.

And so this person is
going to come in and say,

OK, yeah, looks good.

We're going to approve
that rollout to production.



And so we'll go back
and check on it.

And the deployment
to Prod is underway.

It finished.

Now, let's check on our
production application.

Let's make sure
everything's in order.



Looks good.

All right.

So our final state is
the developer, again,

working in Cloud Code,
their local loop,

which can be minikube.

Local can kind of be anywhere.

That's what I found
out with customers.

It can be I'm on a laptop,
and I'm on an airplane local.

Or it can be I'm just
in my normal GKE cluster

that someone made for me.

And that's where I
do my development.

So they're doing
that dev interloop,

getting that fast feedback.

They submit a PR
to the Git repo.

And an operator approves the PR.

And there is a trigger
from Cloud Build

because master has changed.

The artifact is generated,
stored in artifact registry.

And the associated staging
pipeline step is run.

We obviously had an extra
Canary deployment step in here.

And once Canary
tries to go to Prod,

an operator actually has to
come in and approve that.

And then you have
your change to Prod.

So that is the full
end to end picture.

And that is the end of the demo.

All right, so let's summarize
what we've seen today.

The golden path for application
delivery on Google Cloud

centers around
unifying pipelines

across dev, CI, and CD.

We accomplished
this with Scaffold.

Scaffold is open source.

It's a CLI, but it's wrapped
in a UI provided by Cloud Code.

It helps developers
get productive

with local Kubernetes
development and debugging

right within the IDE.

But Scaffold also
creates pipeline parity

by commands that fit right
into your CI and CD processes.

You can adopt this
approach incrementally

starting with only those
components that you need most.

So here are some
resources that we've

talked about in today's talk.

If you'd like to
get started, we'd

invite you to check these out.

Chris?

CHRIS WILLIS: Yeah, so
just one thing to note.

That GitHub link at the bottom
is just on my own GitHub.

But that read me and
that starter application

is exactly what I used
in the demo here today.

So if you want to try
it out on your own,

it'll all work just
following the readme

and generating all of
the YAML files as you go.

So feel free to check that out.

VICTOR SZALVAY: Well,
that's it for a session.

I want to thank my colleague
Chris for a fantastic demo.

And I want to thank you all
for spending some time with us,

and learning about the golden
path for application delivery

on Google Cloud.

Thanks.



